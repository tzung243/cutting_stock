
Những thứ chắc sẽ cần 😊

(1)
{'avl_l': ['10'], 'req[0].length': ['4'], 'req[0].count': ['6'], 'req[1].length': ['6'], 'req[1].count': ['14'], 'req[3].length': ['5'], 'req[3].count': ['4'], 'req[4].length': ['3'], 'req[4].count': ['7'], 'quantity__row': ['1']}

(2)
Ví dụ thanh available length = 5 để cắt thành các thanh 2, 3, 4 thì có các pattern:
Possible patterns: [[2, 2], [3, 2], [4]]

(3).
Ví dụ với các patterns như ở trên: [[2, 2], [3, 2], [4]]
Các loại yêu cầu là: [4, 3, 2]
Vì vậy số lần các thanh có chiều dài yêu cầu (4, 3, 2) được cắt trong các patterns sẽ là: a[] = [[0, 0, 1], [0, 1, 0], [2, 1, 0]]
A = [{'x1': 0, 'x2': 0, 'x3': 1}, {'x1': 0, 'x2': 1, 'x3': 0}, {'x1': 2, 'x2': 1, 'x3': 0}].
Ví dụ một điều kiện có thể thế này.
Giả sử như người đó yêu cầu số lượng tương ứng cho các thanh [4, 3, 2] là [2, 6, 4].
Vậy điều kiện cho bài toán tối ưu hóa như theo ở A sẽ là (3 đk do len(A) = 3).
1:	0.x1 + 0.x2 + 1.x3 >= 2	(ít nhất là phải đủ sl yêu cầu)
2:	0.x1 + 1.x2 + 0.x3 >= 6
3:	2.x1 + 1.x2 + 0.x3 >= 4

Hàm mục tiêu: 	x1 + x2 + x3	 	min	(tức là tổng các thanh cần cắt min)
Để kiểm tra có thể chạy thử, output sẽ ra: x1 = -1, x2 = 6, x3 = 2.
Biến x3 tương ứng với pattern [4] và x2 tương ứng với [3, 2] do ta đã gán nó theo thứ tự xuất hiện ở các pattern, nghiệm âm thì ta bỏ đi là đc.
